/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    //Global Variable
    private int maxSum;
    
    //Main function
    public int maxPathSum(TreeNode root) {
        maxSum = Integer.MIN_VALUE;
        helper(root);
        return maxSum;
    }
    
    //helper function
    private int helper(TreeNode node){
        if(node == null) return 0;
        
        //Recursively compute max path sum for left and right subtrees
        //ignore negatives -> b/w -ve and 0, 0 is bigger
        int left = Math.max(helper(node.left), 0);
        int right = Math.max(helper(node.right), 0);

        //Max path through current Node 
        int current = node.val + left + right;

        //update global max
        maxSum = Math.max(maxSum, current);

        //return max path including this node and one child
        return node.val + Math.max(left, right);
    }
}
