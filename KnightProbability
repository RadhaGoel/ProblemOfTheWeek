class Solution {
    public double knightProbability(int n, int k, int row, int column) {
        int [][] dirs = {
            {-2, -1}, {-2, 1}, {-1, -2}, {-1, 2},
            {1, -2}, {1, 2}, {2, -1}, {2, 1}
        };
        double[][] dp = new double[n][n];
        dp[row][column] = 1.0;

        for(int move = 1; move <= k; move++){
            double[][] newDp = new double[n][n];
            for(int i = 0; i < n; i++){
                for(int j = 0; j < n; j++){
                    if(dp[i][j] > 0){
                        for(int[] d : dirs){
                            int ni = i + d[0];
                            int nj = j + d[1];
                            if (ni >= 0 && nj >= 0 && 
                            ni < n && nj < n){
                                newDp[ni][nj] += dp[i][j] / 8.0;
                            }
                        }
                    }
                }
            }

            dp = newDp;
        }
            double totalProb = 0.0;
            for(int i = 0; i < n; i++){
                for(int j = 0; j < n; j++){
                    totalProb += dp[i][j];
                }
            }
            return totalProb;
        }
    }
